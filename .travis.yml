sudo: required

language: generic

services:
  - docker

before_install:
  - docker pull omnetpp/travis-inet:5.4.1-180629

cache:
  directories:
    - $HOME/docker_ccache
    - $HOME/coverage_profiles

# This is not used directly by Travis (the name doesn't matter), we just reuse it in script: nodes.
docker_command: &DOCKER_COMMAND travis_wait 30 sleep infinity &
                  docker run -ti --env TARGET_PLATFORM --env MODE --env TRAVIS_REPO_SLUG
                  -v /home/travis/build/$TRAVIS_REPO_SLUG:/$TRAVIS_REPO_SLUG
                  -v $HOME/docker_ccache:/root/.ccache -v $HOME/coverage_profiles:/root/coverage_profiles
                  omnetpp/travis-inet:5.4.1-180629
                  /bin/bash /$TRAVIS_REPO_SLUG/_scripts/travis/travis-stage-$STAGE.sh $INNER_ARGS
                   # the last two (STAGE and INNER_ARGS) come from export statements, not env: lines

# The "build" stage inherits this, so we won't have to repeat it 6 more times.
# The "fingerprints" stage overwrites it for all of its jobs.
script:
  - export STAGE=build # not env, so it doesn't affect the cache key
  - *DOCKER_COMMAND

# Note that the "env:" values must match EXACTLY (the whole string, even the spaces between the assignments)
# between the jobs in the "build" stage (which prepare the cache) and the corresponding jobs in the
# "fingerprints" stage (which use the cache). See: https://github.com/travis-ci/travis-ci/issues/9043
jobs:
  include:

    - stage: build
      env: TARGET_PLATFORM=linux MODE=release
    - env: TARGET_PLATFORM=linux MODE=debug
    - env: TARGET_PLATFORM=windows MODE=release
    - env: TARGET_PLATFORM=windows MODE=debug
    - env: TARGET_PLATFORM=macosx MODE=release
    - env: TARGET_PLATFORM=macosx MODE=debug

    # The following atrocity was necessitated by the timeout limits on Travis.

    # release mode fingerprints, split into three arbitrary parts using filters, to avoid freaking timeouts
    - stage: fingerprints
      script:
        - export STAGE=fingerprints INNER_ARGS="-n 2 -i 0" # not env, so it doesn't affect the cache key
        - *DOCKER_COMMAND
      env: TARGET_PLATFORM=linux MODE=release
    - script:
        - export STAGE=fingerprints INNER_ARGS="-n 2 -i 1" # not env, so it doesn't affect the cache key
        - *DOCKER_COMMAND
      env: TARGET_PLATFORM=linux MODE=release


    - script:
        - export STAGE=fingerprints INNER_ARGS="-n 8 -i 0" # not env, so it doesn't affect the cache key
        - *DOCKER_COMMAND
      env: TARGET_PLATFORM=linux MODE=debug
    - script:
        - export STAGE=fingerprints INNER_ARGS="-n 8 -i 1" # not env, so it doesn't affect the cache key
        - *DOCKER_COMMAND
      env: TARGET_PLATFORM=linux MODE=debug
    - script:
        - export STAGE=fingerprints INNER_ARGS="-n 8 -i 2" # not env, so it doesn't affect the cache key
        - *DOCKER_COMMAND
      env: TARGET_PLATFORM=linux MODE=debug
    - script:
        - export STAGE=fingerprints INNER_ARGS="-n 8 -i 3" # not env, so it doesn't affect the cache key
        - *DOCKER_COMMAND
      env: TARGET_PLATFORM=linux MODE=debug
    - script:
        - export STAGE=fingerprints INNER_ARGS="-n 8 -i 4" # not env, so it doesn't affect the cache key
        - *DOCKER_COMMAND
      env: TARGET_PLATFORM=linux MODE=debug
    - script:
        - export STAGE=fingerprints INNER_ARGS="-n 8 -i 5" # not env, so it doesn't affect the cache key
        - *DOCKER_COMMAND
      env: TARGET_PLATFORM=linux MODE=debug
    - script:
        - export STAGE=fingerprints INNER_ARGS="-n 8 -i 6" # not env, so it doesn't affect the cache key
        - *DOCKER_COMMAND
      env: TARGET_PLATFORM=linux MODE=debug
    - script:
        - export STAGE=fingerprints INNER_ARGS="-n 8 -i 7" # not env, so it doesn't affect the cache key
        - *DOCKER_COMMAND
      env: TARGET_PLATFORM=linux MODE=debug


    - stage: moduletests
      script:
        - export STAGE=moduletests INNER_ARGS="" # not env, so it doesn't affect the cache key
        - *DOCKER_COMMAND
      env: TARGET_PLATFORM=linux MODE=debug
    # TODO add release mode when the runner script supports it

    - stage: unittests
      script:
        - export STAGE=unittests INNER_ARGS="" # not env, so it doesn't affect the cache key
        - *DOCKER_COMMAND
      env: TARGET_PLATFORM=linux MODE=debug
    # TODO add release mode when the runner script supports it

    - stage: packettests
      script:
        - export STAGE=packettests INNER_ARGS="" # not env, so it doesn't affect the cache key
        - *DOCKER_COMMAND
      env: TARGET_PLATFORM=linux MODE=debug
    # TODO add release mode when the runner script supports it

    - stage: queueingtests
      script:
        - export STAGE=queueingtests INNER_ARGS="" # not env, so it doesn't affect the cache key
        - *DOCKER_COMMAND
      env: TARGET_PLATFORM=linux MODE=debug
    # TODO add release mode when the runner script supports it

    - stage: coverage
      script:
        - export STAGE=coverage # not env, so it doesn't affect the cache key
        - *DOCKER_COMMAND
      env: TARGET_PLATFORM=linux MODE=debug
# "Look what you made me do", Travis.
